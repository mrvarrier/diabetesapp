import 'dart:io';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';
import 'package:intl/intl.dart';
import '../models/user_model.dart';

class PDFService {
  // Generate progress report PDF
  Future<File> generateProgressReport({
    required UserModel user,
    required List<Map<String, dynamic>> completedLessons,
    required List<Map<String, dynamic>> quizScores,
    required Map<String, dynamic> engagementMetrics,
    required List<String> topicsToReview,
  }) async {
    // Create PDF document
    final pdf = pw.Document();

    // Load fonts
    final font = await rootBundle.load('assets/fonts/Roboto-Regular.ttf');
    final fontBold = await rootBundle.load('assets/fonts/Roboto-Bold.ttf');

    final ttf = pw.Font.ttf(font);
    final ttfBold = pw.Font.ttf(fontBold);

    // Format date
    final now = DateTime.now();
    final dateFormatter = DateFormat('MMMM d, yyyy');
    final formattedDate = dateFormatter.format(now);

    // Add pages to PDF
    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(32),
        header: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text(
                    'Diabetes Education Progress Report',
                    style: pw.TextStyle(
                      font: ttfBold,
                      fontSize: 20,
                      color: PdfColors.blue800,
                    ),
                  ),
                  pw.Text(
                    formattedDate,
                    style: pw.TextStyle(
                      font: ttf,
                      fontSize: 14,
                      color: PdfColors.grey700,
                    ),
                  ),
                ],
              ),
              pw.SizedBox(height: 4),
              pw.Divider(color: PdfColors.blue800),
              pw.SizedBox(height: 8),
            ],
          );
        },
        footer: (pw.Context context) {
          return pw.Column(
            children: [
              pw.Divider(),
              pw.SizedBox(height: 4),
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text(
                    'Generated by DiabetesBuddy',
                    style: pw.TextStyle(
                      font: ttf,
                      fontSize: 10,
                      color: PdfColors.grey700,
                    ),
                  ),
                  pw.Text(
                    'Page ${context.pageNumber} of ${context.pagesCount}',
                    style: pw.TextStyle(
                      font: ttf,
                      fontSize: 10,
                      color: PdfColors.grey700,
                    ),
                  ),
                ],
              ),
            ],
          );
        },
        build: (pw.Context context) {
          return [
            // User Information Section
            pw.Container(
              padding: const pw.EdgeInsets.all(16),
              decoration: pw.BoxDecoration(
                color: PdfColors.blue50,
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Row(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Expanded(
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text(
                          'Name: ${user.fullName}',
                          style: pw.TextStyle(font: ttf, fontSize: 14),
                        ),
                        pw.SizedBox(height: 4),
                        pw.Text(
                          'Diabetes Type: ${user.diabetesType}',
                          style: pw.TextStyle(font: ttf, fontSize: 14),
                        ),
                        pw.SizedBox(height: 4),
                        pw.Text(
                          'Treatment: ${user.treatmentMethod}',
                          style: pw.TextStyle(font: ttf, fontSize: 14),
                        ),
                      ],
                    ),
                  ),
                  pw.Expanded(
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text(
                          'Total Points: ${user.points}',
                          style: pw.TextStyle(
                            font: ttfBold,
                            fontSize: 14,
                            color: PdfColors.blue800,
                          ),
                        ),
                        pw.SizedBox(height: 4),
                        pw.Text(
                          'Current Streak: ${user.streakDays} days',
                          style: pw.TextStyle(
                            font: ttfBold,
                            fontSize: 14,
                            color: PdfColors.blue800,
                          ),
                        ),
                        pw.SizedBox(height: 4),
                        pw.Text(
                          'Achievements: ${user.unlockedAchievements.length}',
                          style: pw.TextStyle(
                            font: ttfBold,
                            fontSize: 14,
                            color: PdfColors.blue800,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            pw.SizedBox(height: 16),

            // Summary Section
            pw.Header(
              level: 1,
              text: 'Learning Summary',
              textStyle: pw.TextStyle(
                font: ttfBold,
                fontSize: 16,
                color: PdfColors.blue800,
              ),
            ),
            pw.SizedBox(height: 8),

            pw.Row(
              children: [
                _buildInfoBox(
                  'Lessons Completed',
                  '${completedLessons.length}',
                  PdfColors.green700,
                  ttf,
                  ttfBold,
                ),
                pw.SizedBox(width: 16),
                _buildInfoBox(
                  'Quizzes Taken',
                  '${quizScores.length}',
                  PdfColors.orange700,
                  ttf,
                  ttfBold,
                ),
                pw.SizedBox(width: 16),
                _buildInfoBox(
                  'Learning Time',
                  '${engagementMetrics['totalLearningMinutes']} min',
                  PdfColors.purple700,
                  ttf,
                  ttfBold,
                ),
              ],
            ),
            pw.SizedBox(height: 16),

            // Completed Lessons Section
            pw.Header(
              level: 1,
              text: 'Completed Lessons',
              textStyle: pw.TextStyle(
                font: ttfBold,
                fontSize: 16,
                color: PdfColors.blue800,
              ),
            ),
            pw.SizedBox(height: 8),

            _buildLessonsTable(completedLessons, ttf, ttfBold),
            pw.SizedBox(height: 16),

            // Quiz Scores Section
            pw.Header(
              level: 1,
              text: 'Quiz Performance',
              textStyle: pw.TextStyle(
                font: ttfBold,
                fontSize: 16,
                color: PdfColors.blue800,
              ),
            ),
            pw.SizedBox(height: 8),

            _buildQuizTable(quizScores, ttf, ttfBold),
            pw.SizedBox(height: 16),

            // Topics to Review Section
            pw.Header(
              level: 1,
              text: 'Topics to Review',
              textStyle: pw.TextStyle(
                font: ttfBold,
                fontSize: 16,
                color: PdfColors.blue800,
              ),
            ),
            pw.SizedBox(height: 8),

            topicsToReview.isNotEmpty
                ? _buildTopicsToReviewList(topicsToReview, ttf)
                : pw.Text(
              'Great job! You\'re doing well with all topics.',
              style: pw.TextStyle(font: ttf, fontSize: 14),
            ),
            pw.SizedBox(height: 16),

            // Next Steps Section
            pw.Header(
              level: 1,
              text: 'Recommendations',
              textStyle: pw.TextStyle(
                font: ttfBold,
                fontSize: 16,
                color: PdfColors.blue800,
              ),
            ),
            pw.SizedBox(height: 8),

            _buildRecommendations(user, completedLessons.length, topicsToReview, ttf),
          ];
        },
      ),
    );

    // Save the PDF
    final output = await getTemporaryDirectory();
    final file = File('${output.path}/progress_report.pdf');
    await file.writeAsBytes(await pdf.save());

    return file;
  }

  // Helper for building info boxes
  pw.Container _buildInfoBox(
      String label,
      String value,
      PdfColor color,
      pw.Font font,
      pw.Font fontBold,
      ) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(12),
      width: 150,
      decoration: pw.BoxDecoration(
        color: color.shade50,
        borderRadius: pw.BorderRadius.circular(8),
        border: pw.Border.all(color: color.shade200),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            label,
            style: pw.TextStyle(
              font: font,
              fontSize: 12,
              color: color,
            ),
          ),
          pw.SizedBox(height: 4),
          pw.Text(
            value,
            style: pw.TextStyle(
              font: fontBold,
              fontSize: 18,
              color: color,
            ),
          ),
        ],
      ),
    );
  }

  // Helper for building lessons table
  pw.Widget _buildLessonsTable(
      List<Map<String, dynamic>> lessons,
      pw.Font font,
      pw.Font fontBold,
      ) {
    return pw.Table(
      border: pw.TableBorder.all(color: PdfColors.grey300),
      columnWidths: {
        0: const pw.FractionColumnWidth(0.1),
        1: const pw.FractionColumnWidth(0.6),
        2: const pw.FractionColumnWidth(0.3),
      },
      children: [
        // Header row
        pw.TableRow(
          decoration: const pw.BoxDecoration(color: PdfColors.blue100),
          children: [
            pw.Padding(
              padding: const pw.EdgeInsets.all(8),
              child: pw.Text(
                'No.',
                style: pw.TextStyle(font: fontBold, fontSize: 12),
              ),
            ),
            pw.Padding(
              padding: const pw.EdgeInsets.all(8),
              child: pw.Text(
                'Lesson',
                style: pw.TextStyle(font: fontBold, fontSize: 12),
              ),
            ),
            pw.Padding(
              padding: const pw.EdgeInsets.all(8),
              child: pw.Text(
                'Completed On',
                style: pw.TextStyle(font: fontBold, fontSize: 12),
              ),
            ),
          ],
        ),

        // Content rows
        ...lessons.asMap().entries.map((entry) {
          int index = entry.key;
          Map<String, dynamic> lesson = entry.value;
          DateTime completedDate = lesson['completedOn'] ?? DateTime.now();

          return pw.TableRow(
            decoration: index % 2 == 0
                ? null
                : const pw.BoxDecoration(color: PdfColors.grey100),
            children: [
              pw.Padding(
                padding: const pw.EdgeInsets.all(8),
                child: pw.Text(
                  '${index + 1}',
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(8),
                child: pw.Text(
                  lesson['title'] ?? '',
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(8),
                child: pw.Text(
                  DateFormat('yyyy-MM-dd').format(completedDate),
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ),
            ],
          );
        }).toList(),
      ],
    );
  }

  // Helper for building quiz table
  pw.Widget _buildQuizTable(
      List<Map<String, dynamic>> quizzes,
      pw.Font font,
      pw.Font fontBold,
      ) {
    return pw.Table(
      border: pw.TableBorder.all(color: PdfColors.grey300),
      columnWidths: {
        0: const pw.FractionColumnWidth(0.1),
        1: const pw.FractionColumnWidth(0.5),
        2: const pw.FractionColumnWidth(0.2),
        3: const pw.FractionColumnWidth(0.2),
      },
      children: [
        // Header row
        pw.TableRow(
          decoration: const pw.BoxDecoration(color: PdfColors.blue100),
          children: [
            pw.Padding(
              padding: const pw.EdgeInsets.all(8),
              child: pw.Text(
                'No.',
                style: pw.TextStyle(font: fontBold, fontSize: 12),
              ),
            ),
            pw.Padding(
              padding: const pw.EdgeInsets.all(8),
              child: pw.Text(
                'Quiz',
                style: pw.TextStyle(font: fontBold, fontSize: 12),
              ),
            ),
            pw.Padding(
              padding: const pw.EdgeInsets.all(8),
              child: pw.Text(
                'Score',
                style: pw.TextStyle(font: fontBold, fontSize: 12),
              ),
            ),
            pw.Padding(
              padding: const pw.EdgeInsets.all(8),
              child: pw.Text(
                'Result',
                style: pw.TextStyle(font: fontBold, fontSize: 12),
              ),
            ),
          ],
        ),

        // Content rows
        ...quizzes.asMap().entries.map((entry) {
          int index = entry.key;
          Map<String, dynamic> quiz = entry.value;
          int score = quiz['score'] ?? 0;
          int total = quiz['totalQuestions'] ?? 1;
          double percentage = (score / total) * 100;
          bool passed = quiz['passed'] ?? false;

          return pw.TableRow(
            decoration: index % 2 == 0
                ? null
                : const pw.BoxDecoration(color: PdfColors.grey100),
            children: [
              pw.Padding(
                padding: const pw.EdgeInsets.all(8),
                child: pw.Text(
                  '${index + 1}',
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(8),
                child: pw.Text(
                  quiz['title'] ?? '',
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(8),
                child: pw.Text(
                  '$score/$total (${percentage.toStringAsFixed(0)}%)',
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(8),
                child: pw.Text(
                  passed ? 'Passed' : 'Failed',
                  style: pw.TextStyle(
                    font: fontBold,
                    fontSize: 12,
                    color: passed ? PdfColors.green700 : PdfColors.red700,
                  ),
                ),
              ),
            ],
          );
        }).toList(),
      ],
    );
  }

  // Helper for building topics to review list
  pw.Widget _buildTopicsToReviewList(
      List<String> topics,
      pw.Font font,
      ) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: topics.map((topic) {
        return pw.Padding(
          padding: const pw.EdgeInsets.symmetric(vertical: 4),
          child: pw.Row(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Container(
                width: 6,
                height: 6,
                margin: const pw.EdgeInsets.only(top: 6, right: 8),
                decoration: const pw.BoxDecoration(
                  color: PdfColors.red700,
                  shape: pw.BoxShape.circle,
                ),
              ),
              pw.Expanded(
                child: pw.Text(
                  topic,
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ),
            ],
          ),
        );
      }).toList(),
    );
  }

  // Helper for building recommendations
  pw.Widget _buildRecommendations(
      UserModel user,
      int completedLessonsCount,
      List<String> topicsToReview,
      pw.Font font,
      ) {
    List<String> recommendations = [];

    // Add streak-based recommendation
    if (user.streakDays < 7) {
      recommendations.add('Try to maintain a daily learning streak to build a consistent diabetes education habit.');
    } else if (user.streakDays >= 30) {
      recommendations.add('You\'ve maintained an excellent learning streak! Keep up the good work to reinforce your knowledge.');
    } else {
      recommendations.add('You\'re building a good learning habit. Continue your daily streak for better long-term retention.');
    }

    // Add topic review recommendation
    if (topicsToReview.isNotEmpty) {
      recommendations.add('Focus on reviewing the topics listed above to strengthen your understanding in those areas.');
    }

    // Add completion-based recommendation
    if (completedLessonsCount < 5) {
      recommendations.add('You\'re just getting started! Complete more lessons to build a solid foundation of diabetes knowledge.');
    } else if (completedLessonsCount >= 15) {
      recommendations.add('You\'ve completed a significant number of lessons. Consider applying this knowledge in your daily diabetes management.');
    } else {
      recommendations.add('Continue working through the educational content to expand your diabetes knowledge.');
    }

    // Add diabetes type specific recommendation
    if (user.diabetesType == 'Type 1') {
      recommendations.add('As a Type 1 diabetes patient, continue focusing on insulin management and glucose monitoring techniques.');
    } else if (user.diabetesType == 'Type 2') {
      recommendations.add('As a Type 2 diabetes patient, continue focusing on diet, exercise, and medication management strategies.');
    } else if (user.diabetesType == 'Gestational') {
      recommendations.add('As a gestational diabetes patient, continue focusing on pregnancy-specific management techniques and post-pregnancy care.');
    }

    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: recommendations.map((recommendation) {
        return pw.Padding(
          padding: const pw.EdgeInsets.symmetric(vertical: 4),
          child: pw.Row(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Container(
                width: 6,
                height: 6,
                margin: const pw.EdgeInsets.only(top: 6, right: 8),
                decoration: const pw.BoxDecoration(
                  color: PdfColors.blue800,
                  shape: pw.BoxShape.circle,
                ),
              ),
              pw.Expanded(
                child: pw.Text(
                  recommendation,
                  style: pw.TextStyle(font: font, fontSize: 12),
                ),
              ),
            ],
          ),
        );
      }).toList(),
    );
  }

  // Share progress report
  Future<void> shareProgressReport(File reportFile) async {
    try {
      await Share.shareFiles(
        [reportFile.path],
        text: 'My Diabetes Education Progress Report',
      );
    } catch (e) {
      print('Error sharing progress report: $e');
    }
  }
}